# This script was generated by MDagent-Setup.

from openmm import *
from openmm.app import *
from openmm.unit import *

# Input Files
pdb = PDBFile("cleaned_fibronectin.pdb")
forcefield = ForceField("amber14-all.xml", "amber14/tip3p.xml")

# System Configuration
nonbondedMethod = NoCutoff
constraints = AllBonds
rigidWater = True
constraintTolerance = 1e-05

# Integration Options
dt = 0.004 * picosecond
temperature = 300 * kelvin
friction = 1.0 / picosecond

# Simulation Options
steps = 10000
equilibrationSteps = 1000
platform = Platform.getPlatformByName("CPU")
dcdReporter = DCDReporter("trajectory.dcd", 10000)
dataReporter = StateDataReporter(
    "log.txt",
    100,
    totalSteps=steps,
    step=True,
    speed=True,
    progress=True,
    elapsedTime=True,
    remainingTime=True,
    potentialEnergy=True,
    temperature=True,
    volume=True,
    density=True,
    separator="	",
)
checkpointReporter = CheckpointReporter("checkpoint.chk", 10000)

# Minimize and Equilibrate
# ... code for minimization and equilibration ...

# Simulate

print("Building system...")
topology = pdb.topology
positions = pdb.positions

system = forcefield.createSystem(
    topology,
    nonbondedMethod=nonbondedMethod,
    constraints=constraints,
    rigidWater=rigidWater,
)

integrator = LangevinMiddleIntegrator(temperature, friction, dt)
integrator.setConstraintTolerance(constraintTolerance)
simulation = Simulation(topology, system, integrator, platform)
simulation.context.setPositions(positions)

# Minimize and Equilibrate

print("Performing energy minimization...")
simulation.minimizeEnergy()
print("Equilibrating...")
simulation.context.setVelocitiesToTemperature(temperature)
simulation.step(equilibrationSteps)

# Simulate

print("Simulating...")
simulation.reporters.append(dcdReporter)
simulation.reporters.append(dataReporter)
simulation.reporters.append(checkpointReporter)
simulation.currentStep = 0
simulation.step(steps)
