{"DownloadPdbFile": {"code": "import requests\nimport os\n\ndef download_pdb_file(pdb_id):\n    # Check if the JSON file exists\n    if not os.path.exists(\"pdb_ids.json\"):\n        # Prompt the user to enter a pdb id\n        pdb_id = input(\"Enter a pdb id: \")\n    \n    # Use the pdb id to download the mmcif or pdb file\n    url = f\"https://files.rcsb.org/download/{pdb_id}.pdb\"\n    response = requests.get(url)\n    \n    # Save the downloaded file\n    file_path = f\"{pdb_id}.pdb\"\n    with open(file_path, \"wb\") as file:\n        file.write(response.content)\n    \n    # Return the path to the downloaded file\n    return file_path\n\npdb_id = \"3pqr\"\ndownloaded_file = download_pdb_file(pdb_id)\nprint(f\"Downloaded file: {downloaded_file}\")", "description": "This tool downloads a PDB file from the RCSB Protein Data Bank (PDB) website. \nThe function takes a PDB ID as input and checks if a JSON file containing the PDB IDs exists. \nIf the JSON file does not exist, it prompts the user to enter a PDB ID. \nThe function then uses the PDB ID to construct a URL and sends a GET request to download the PDB file. \nThe downloaded file is saved with the same name as the PDB ID and returned as the output. \nFinally, the function prints the path to the downloaded file.", "full_code": "import requests\nimport os\nfrom typing import Optional\nfrom langchain.tools import BaseTool\nfrom mdagent.utils import PathRegistry\n\ndef download_pdb_file(pdb_id, path_registry):\n    \"\"\"This tool downloads a PDB file from the RCSB Protein Data Bank (PDB) website. \n    The function takes a PDB ID as input and checks if a JSON file containing the PDB IDs exists. \n    If the JSON file does not exist, it prompts the user to enter a PDB ID. \n    The function then uses the PDB ID to construct a URL and sends a GET request to download the PDB file. \n    The downloaded file is saved with the same name as the PDB ID and returned as the output. \n    Finally, the function prints the path to the downloaded file.\"\"\"\n    try:\n        # Check if the JSON file exists\n        if not os.path.exists(\"pdb_ids.json\"):\n            # Prompt the user to enter a pdb id\n            pdb_id = input(\"Enter a pdb id: \")\n        \n        # Use the pdb id to download the mmcif or pdb file\n        url = f\"https://files.rcsb.org/download/{pdb_id}.pdb\"\n        response = requests.get(url)\n        \n        # Save the downloaded file\n        file_path = f\"{pdb_id}.pdb\"\n        with open(file_path, \"wb\") as file:\n            file.write(response.content)\n        \n        # Return the path to the downloaded file\n        return file_path\n    except Exception as e:\n        return str(e)\n\nclass DownloadPdbFile(BaseTool):\n    name = \"DownloadPdbFile\"\n    description = \"\"\"This tool downloads a PDB file from the RCSB Protein Data Bank (PDB) website. \n    The function takes a PDB ID as input and checks if a JSON file containing the PDB IDs exists. \n    If the JSON file does not exist, it prompts the user to enter a PDB ID. \n    The function then uses the PDB ID to construct a URL and sends a GET request to download the PDB file. \n    The downloaded file is saved with the same name as the PDB ID and returned as the output. \n    Finally, the function prints the path to the downloaded file.\"\"\"\n    path_registry: Optional[PathRegistry]\n\n    def __init__(self, path_registry: Optional[PathRegistry]):\n        super().__init__()\n        self.path_registry = path_registry\n\n    def _run(self, pdb_id: str) -> str:\n        \"\"\"Use the tool.\"\"\"\n        try:\n            if self.path_registry is None:\n                return \"Path registry not initialized\"\n            output = download_pdb_file(pdb_id, self.path_registry)\n            if output is None:\n                return \"This tool fails to produce the expected output\"\n            else:\n                return f\"This tool completed its task. Output: {output}\"\n        except Exception as e:\n            return \"Something went wrong: \" + str(e)\n\n    async def _async(self, pdb_id) -> str:\n        \"\"\"Use the tool asynchronously.\"\"\"\n        raise NotImplementedError(\"This tool does not support async\")"}}
